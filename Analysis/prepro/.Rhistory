select(everything())%>%
group_by(subject,condition,selfness,matchness)%>%
summarize(n = n(),
rt = mean(rt, na.rm = TRUE))%>%
ungroup()
df_desc <- df %>%
select(everything())%>%
group_by(subj_idx,condition,selfness,matchness)%>%
summarize(n = n(),
rt = mean(rt, na.rm = TRUE))%>%
ungroup()
df_desc
df_desc <- df %>%
select(everything())%>%
group_by(subj_idx,condition,selfness,matchness)%>%
summarize(n = n(),
rt = mean(rt, na.rm = TRUE))%>%
ungroup()
view(df_desc)
df_desc <- df %>%
select(everything())%>%
group_by(subj_idx,condition,selfness,matchness)%>%
summarize(n = n(),
rt = mean(rt, na.rm = TRUE))%>%
ungroup()
df_desc
df_desc <- df %>%
select(everything())%>%
group_by(subj_idx,
condition,
matchness,
selfness,)%>%
summarize(n = n(),
rt = mean(rt, na.rm = TRUE))%>%
ungroup()
df_desc
df_desc <- df %>%
select(everything())%>%
group_by(condition,
matchness,
selfness,
subj_idx,)%>%
summarize(n = n(),
rt = mean(rt, na.rm = TRUE))%>%
ungroup()
df_desc
df_raw
View(df_raw)
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x) read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 读取被试人口学信息
mutate(subj_idx = as.numeric(jsonlite::fromJSON(df_raw$response[5])$Q0),
gender = jsonlite::fromJSON(df_raw$response[6]),#
year = jsonlite::fromJSON(df_raw$response[7])$Q0,
education = jsonlite::fromJSON(df_raw$response[8])$Q0,
dist = df_raw$view_dist_mm[9],
rt = as.numeric(df_raw$rt))%>%
bind_rows()
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x) read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 读取被试人口学信息
lapply(function(x) mutate(subj_idx = as.numeric(jsonlite::fromJSON(x$response[5])$Q0),
gender = jsonlite::fromJSON(x$response[6]),#
year = jsonlite::fromJSON(x$response[7])$Q0,
education = jsonlite::fromJSON(x$response[8])$Q0,
dist = df_raw$view_dist_mm[9],
rt = as.numeric(x$rt))%>%
bind_rows()
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x)
read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 读取被试人口学信息
lapply(function(x)
mutate(subj_idx = as.numeric(jsonlite::fromJSON(x$response[5])$Q0),
gender = jsonlite::fromJSON(x$response[6]),#
year = jsonlite::fromJSON(x$response[7])$Q0,
education = jsonlite::fromJSON(x$response[8])$Q0,
dist = df_raw$view_dist_mm[9],
rt = as.numeric(x$rt))
list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x)
read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 读取被试人口学信息
lapply(function(x)
mutate(subj_idx = as.numeric(jsonlite::fromJSON(x$response[5])$Q0),
gender = jsonlite::fromJSON(x$response[6]),#
year = jsonlite::fromJSON(x$response[7])$Q0,
education = jsonlite::fromJSON(x$response[8])$Q0,
dist = df_raw$view_dist_mm[9],
rt = as.numeric(x$rt))
View(df_raw)
View(df_raw)
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x)
read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 读取被试人口学信息
lapply{function(x)
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取csv数据
lapply(function(x)
read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 读取被试人口学信息
lapply{function(x){
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取csv数据
lapply(function(x)
read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 读取被试人口学信息
lapply(function(x){
# 从JSON格式的response中提取信息并添加到数据框中
x <- mutate(x,
subj_idx = as.numeric(jsonlite::fromJSON(x$response[5])$Q0),
gender = jsonlite::fromJSON(x$response[6])$Q0,
year = as.numeric(jsonlite::fromJSON(x$response[7])$Q0),
education = jsonlite::fromJSON(x$response[8])$Q0,
rt = as.numeric(x$rt))
# 返回数据框
return(x)}) %>%
bind_rows()
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.csv文件x都执行函数read.csv
lapply(function(x)
read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 将被试人口学信息和实验数据合并
lapply(function(x) {
# 从JSON格式的response中提取信息并添加到数据框中
x <- mutate(x,
subj_idx = as.numeric(jsonlite::fromJSON(x$response[5])$Q0),
gender = jsonlite::fromJSON(x$response[6])$Q0,
year = as.numeric(jsonlite::fromJSON(x$response[7])$Q0),
education = jsonlite::fromJSON(x$response[8])$Q0,
rt = as.numeric(x$rt))
# 返回数据框
return(x)
}) %>%
# 将列表中的所有数据框合并为一个数据框
bind_rows()
View(df_raw)
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.csv文件x都执行函数read.csv
lapply(function(x)
read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 将被试人口学信息和实验数据合并
lapply(function(x) {
# 从JSON格式的response中提取信息并添加到数据框中
x <- mutate(x,
subj_idx = as.numeric(jsonlite::fromJSON(x$response[5])$Q0),
gender = jsonlite::fromJSON(x$response[6])$Q0,
year = as.numeric(jsonlite::fromJSON(x$response[7])$Q0),
education = jsonlite::fromJSON(x$response[8])$Q0,
rt = as.numeric(x$rt))
# 返回数据框
return(x)
}) %>%
# 将列表中的所有数据框合并为一个数据框
bind_rows()
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.csv文件x都执行函数read.csv
lapply(function(x)
read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 将被试人口学信息和实验数据合并
lapply(function(x) {
# 从JSON格式的response中提取信息并添加到数据框中
x <- mutate(x,
subj_idx = as.numeric(jsonlite::fromJSON(x[response][5])$Q0),
gender = jsonlite::fromJSON(x$response[6])$Q0,
year = as.numeric(jsonlite::fromJSON(x$response[7])$Q0),
education = jsonlite::fromJSON(x$response[8])$Q0,
rt = as.numeric(x$rt))
# 返回数据框
return(x)
}) %>%
# 将列表中的所有数据框合并为一个数据框
bind_rows()
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.csv文件x都执行函数read.csv
lapply(function(x)
read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 将被试人口学信息和实验数据合并
lapply(function(x) {
# 从JSON格式的response中提取信息并添加到数据框中
x <- mutate(x,
subj_idx = as.numeric(jsonlite::fromJSON(x$response[5])$Q0),
gender = jsonlite::fromJSON(x$response[6])$Q0,
year = as.numeric(jsonlite::fromJSON(x$response[7])$Q0),
education = jsonlite::fromJSON(x$response[8])$Q0,
rt = as.numeric(x$rt))
# 返回数据框
return(x)
}) %>%
# 将列表中的所有数据框合并为一个数据框
bind_rows()
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.csv文件x都执行函数read.csv
lapply(function(x)
read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 将被试人口学信息和实验数据合并
lapply(function(df)
mutate( subj_idx = response[5])$Q0),
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.csv文件x都执行函数read.csv
lapply(function(x)
read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 将被试人口学信息和实验数据合并
lapply(function(df)
mutate( subj_idx = response[5])$Q0,
gender = jsonlite::fromJSON(response[6])$Q0,
year = as.numeric(jsonlite::fromJSON(response[7])$Q0),
education = jsonlite::fromJSON(response[8])$Q0,
rt = as.numeric(rt)) %>%
# 将列表中的所有数据框合并为一个数据框
bind_rows()
list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.csv文件x都执行函数read.csv
lapply(function(x)
read.csv(file.path("../rawdata", x), header = TRUE))
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.csv文件x都执行函数read.csv
lapply(function(x)
read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 将被试人口学信息和实验数据合并
lapply(function(df)
dplyr::mutate( subj_idx = response[5])$Q0,
gender = jsonlite::fromJSON(response[6])$Q0,
year = as.numeric(jsonlite::fromJSON(response[7])$Q0),
education = jsonlite::fromJSON(response[8])$Q0,
rt = as.numeric(rt)) %>%
# 将列表中的所有数据框合并为一个数据框
bind_rows()
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.csv文件x都执行函数read.csv
lapply(function(x)
read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 将被试人口学信息和实验数据合并
lapply(function(df)
dplyr::mutate( subj_idx = df$response[5])$Q0,
gender = jsonlite::fromJSON(response[6])$Q0,
year = as.numeric(jsonlite::fromJSON(response[7])$Q0),
education = jsonlite::fromJSON(response[8])$Q0,
rt = as.numeric(rt)) %>%
# 将列表中的所有数据框合并为一个数据框
bind_rows()
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.csv文件x都执行函数read.csv
lapply(function(x)
read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 将被试人口学信息和实验数据合并
lapply(function(df)
dplyr::mutate( subj_idx = df$response[5])$Q0,
gender = jsonlite::fromJSON(df$response[6])$Q0,
year = as.numeric(jsonlite::fromJSON(response[7])$Q0),
education = jsonlite::fromJSON(response[8])$Q0,
rt = as.numeric(rt)) %>%
# 将列表中的所有数据框合并为一个数据框
bind_rows()
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.csv文件x都执行函数read.csv
lapply(function(x)
read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 将被试人口学信息和实验数据合并
lapply(function(df)
dplyr::mutate( subj_idx = df$response[5])$Q0,
gender = jsonlite::fromJSON(df$response[6])$Q0,
year = as.numeric(jsonlite::fromJSON(df$response[7])$Q0),
education = jsonlite::fromJSON(df$response[8])$Q0,
rt = as.numeric(rt)) %>%
# 将列表中的所有数据框合并为一个数据框
bind_rows()
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x) read.csv(file.path("../rawdata", x), header = TRUE)) %>%
bind_rows()
df_desc <- df %>%
select(everything())%>%
group_by(condition,
matchness,
selfness,)%>%
summarize(n = n(),
rt = mean(rt, na.rm = TRUE))%>%
ungroup()
df_desc
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x) read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 读取被试人口学信息
mutate(subj_idx = as.numeric(jsonlite::fromJSON(df_raw$response[5])$Q0),
gender = jsonlite::fromJSON(df_raw$response[6]),#
year = jsonlite::fromJSON(df_raw$response[7])$Q0,
education = jsonlite::fromJSON(df_raw$response[8])$Q0,
dist = df_raw$view_dist_mm[9],
rt = as.numeric(df_raw$rt))%>%
bind_rows()
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x) read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 读取被试人口学信息
lapply(function(df) mutate(df,subj_idx = as.numeric(jsonlite::fromJSON(df_raw$response[5])$Q0),
gender = jsonlite::fromJSON(df_raw$response[6]),#
year = jsonlite::fromJSON(df_raw$response[7])$Q0,
education = jsonlite::fromJSON(df_raw$response[8])$Q0,
dist = df_raw$view_dist_mm[9],
rt = as.numeric(df_raw$rt)))%>%
bind_rows()
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x) read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 读取被试人口学信息
lapply(function(df) mutate(df,subj_idx = as.numeric(jsonlite::fromJSON(df$response[5])$Q0),
gender = jsonlite::fromJSON(df$response[6]),#
year = jsonlite::fromJSON(df_raw$response[7])$Q0,
education = jsonlite::fromJSON(df$response[8])$Q0,
dist = df$view_dist_mm[9],
rt = as.numeric(df$rt)))%>%
bind_rows()
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x) read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 读取被试人口学信息
lapply(function(df) mutate(df,subj_idx = as.numeric(jsonlite::fromJSON(response[5])$Q0),
gender = jsonlite::fromJSON(df$response[6]),#
year = jsonlite::fromJSON(df_raw$response[7])$Q0,
education = jsonlite::fromJSON(df$response[8])$Q0,
dist = df$view_dist_mm[9],
rt = as.numeric(df$rt)))%>%
bind_rows()
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1A_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x) read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 读取被试人口学信息
lapply(function(df) mutate(df,subj_idx = as.numeric(jsonlite::fromJSON(response[5])$Q0),
gender = jsonlite::fromJSON(response[6]),#
year = jsonlite::fromJSON(response[7])$Q0,
education = jsonlite::fromJSON(response[8])$Q0,
dist = view_dist_mm[9],
rt = as.numeric(rt)))%>%
bind_rows()
df <- df_raw %>%
# 选择变量
select(subj_idx,
#gender,
#year,
#education,
#dist,
rt,
correct_response,
correct,
key_press,
Image,
word,
condition,
trial_type) %>%
# 选择试次
dplyr::filter(trial_type == "psychophysics" &
condition != "prac" &
Image != "img/T_ambi40.png")%>%
# 添加列：matchness, selfness
mutate(
matchness =
case_when(
subj_idx %% 2 == 1 & correct_response == "j" ~ "match",
subj_idx %% 2 == 1 & correct_response == "f" ~ "mismatch",
subj_idx %% 2 == 0 & correct_response == "f" ~ "match",
subj_idx %% 2 == 0 & correct_response == "j" ~ "mismatch"),
selfness =
case_when(
word == '自我' ~ "selfness",
.default = as.character("others")
)) %>%
# 剔除无关变量
select(-correct_response,
-key_press,
-Image,
-word,
-trial_type)
df
df_desc <- df %>%
select(everything())%>%
group_by(condition,
matchness,
selfness,)%>%
summarize(n = n(),
rt = mean(rt, na.rm = TRUE))%>%
ungroup()
df_desc
df_desc <- df %>%
select(everything())%>%
group_by(condition,
matchness,
selfness,
subj_idx)%>%
summarize(n = n(),
rt = mean(rt, na.rm = TRUE))%>%
ungroup()
df_desc
df_desc <- df %>%
select(everything())%>%
group_by(condition,
matchness,
selfness,
subj_idx)%>%
summarize(n = n(),
rt = mean(rt, na.rm = TRUE))%>%
ungroup()
df_desc
df_desc <- df %>%
select(everything())%>%
group_by(condition,
matchness,
selfness,
#subj_idx
)%>%
summarize(n = n(),
rt = mean(rt, na.rm = TRUE))%>%
ungroup()
df_desc
model <- aov(rt ~ matchness * selfness, data = df)
# 查看方差分析结果
summary(model)
summary(model)
TukeyHSD(model, "matchness")
TukeyHSD(model, "selfness")
model <- aov(rt ~ matchness * selfness, data = df)
# 查看方差分析结果
summary(model)
TukeyHSD(model, "matchness")
TukeyHSD(model, "selfness")
# load packages
library(tidyverse)
library(ggplot2)
df_raw <- list.files(file.path("../rawdata"), pattern = "exp1B_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x) read.csv(file.path("../rawdata", x), header = TRUE)) %>%
# 读取被试人口学信息
lapply(function(df) mutate(df,subj_idx = as.numeric(jsonlite::fromJSON(response[5])$Q0),
gender = jsonlite::fromJSON(response[6]),#
year = jsonlite::fromJSON(response[7])$Q0,
education = jsonlite::fromJSON(response[8])$Q0,
dist = view_dist_mm[9],
rt = as.numeric(rt)))%>%
bind_rows()
df <- df_raw %>%
# 选择变量
select(subj_idx,
#gender,
#year,
#education,
#dist,
rt,
correct_response,
correct,
key_press,
Image,
word,
condition,
trial_type) %>%
# 选择试次
dplyr::filter(trial_type == "psychophysics" &
condition != "prac" &
Image != "img/T_ambi40.png")%>%
# 添加列：matchness, selfness
mutate(
matchness =
case_when(
subj_idx %% 2 == 1 & correct_response == "j" ~ "match",
subj_idx %% 2 == 1 & correct_response == "f" ~ "mismatch",
subj_idx %% 2 == 0 & correct_response == "f" ~ "match",
subj_idx %% 2 == 0 & correct_response == "j" ~ "mismatch"),
selfness =
case_when(
word == '自我' ~ "selfness",
.default = as.character("others")
)) %>%
# 剔除无关变量
select(-correct_response,
-key_press,
-Image,
-word,
-trial_type)
df
df_desc <- df %>%
select(everything())%>%
group_by(condition,
matchness,
selfness,
#subj_idx
)%>%
summarize(n = n(),
rt = mean(rt, na.rm = TRUE))%>%
ungroup()
df_desc
df_desc <- df %>%
select(everything())%>%
group_by(condition,
matchness,
selfness,
#subj_idx
)%>%
summarize(n = n(),
rt = mean(rt, na.rm = TRUE))%>%
ungroup()
df_desc
model <- aov(rt ~ matchness * selfness, data = df)
# 查看方差分析结果
summary(model)
TukeyHSD(model, "matchness")
TukeyHSD(model, "selfness")
